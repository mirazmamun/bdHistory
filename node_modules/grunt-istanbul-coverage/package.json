{
  "name": "grunt-istanbul-coverage",
  "description": "A grunt plugin to enforce coverage thresholds from istanbul coverage objects.",
  "version": "0.0.4",
  "homepage": "https://github.com/daniellmb/grunt-istanbul-coverage",
  "author": {
    "name": "Daniel Lamb",
    "url": "http://daniellmb.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/daniellmb/grunt-istanbul-coverage.git"
  },
  "bugs": {
    "url": "https://github.com/daniellmb/grunt-istanbul-coverage/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/daniellmb/grunt-istanbul-coverage/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.9.2",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.4",
    "istanbul": "~0.2.6"
  },
  "dependencies": {
    "istanbul": "~0.2.6"
  },
  "peerDependencies": {
    "grunt": "~0.4.4"
  },
  "keywords": [
    "gruntplugin",
    "coverage",
    "check coverage",
    "code coverage",
    "JS code coverage",
    "JS coverage",
    "istanbul"
  ],
  "readme": "# grunt-istanbul-coverage [![Build Status](https://travis-ci.org/daniellmb/grunt-istanbul-coverage.png)](https://travis-ci.org/daniellmb/grunt-istanbul-coverage)\n\n> A simple grunt plugin for checking aggregated coverage thresholds from istanbul coverage JSON files.\n\nI wanted more than just insight into code coverage but a way to enforce threshold limits as well.\n\n\n## The \"coverage\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `coverage` to the data object passed into `grunt.initConfig()`.\nThresholds, when specified as a positive number are taken to be the minimum percentage required.\nWhen a threshold is specified as a negative number it represents the maximum number of uncovered entities allowed.\nFor example, `'statements': 90` means the minimum statement coverage is 90%. While `'statements': -10` implies that no\nmore than 10 uncovered statements are allowed,\n\n```js\ngrunt.initConfig({\n  coverage: {\n    options: {\n      thresholds: {\n        'statements': 90,\n        'branches': 90,\n        'lines': 90,\n        'functions': 90\n      },\n      dir: 'coverage',\n      root: 'test'\n    }\n  }\n})\n```\n\nTIP: I suggest you `clean` the coverage folder each time to speed up the checks and so you're only validating the most\nrecent coverage levels.\n\n\n## Using with AngularJS\n\nThis snippet from a karma.config.js will output the report and JSON files into a coverage folder.\n\n```js\ncoverageReporter = {\n  type: 'html',\n  dir: 'test/coverage'\n};\n```\n\n\n## Setup\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the\n[Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\nOnce you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-istanbul-coverage --save-dev\n```\n\nWhen the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-istanbul-coverage');\n```\n\n\n## License\nCopyright (c) 2013 Daniel Lamb\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-istanbul-coverage@0.0.4",
  "_from": "grunt-istanbul-coverage@~0.0.2"
}
